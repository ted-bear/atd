package first;

public interface LinkedList<T> {

    /// Команды ///

    // Предусловие: Список не пуст
    // Постусловие: --
    void head();

    // Предусловие: Список не пуст
    // Постусловие: --
    void tail();

    // Предусловие: Текущий элемент есть (т.е список не пуст) и есть элемент справа
    // Постусловие: --
    void right();

    // Предусловие: Текущий элемент есть (т.е список не пуст)
    // Постусловие: Кол-во элементов увеличилось на 1
    void putRight(T value);

    // Предусловие: Текущий элемент есть (т.е список не пуст)
    // Постусловие: Кол-во элементов увеличилось на 1
    void putLeft(T value);

    // Предусловие: Текущий элемент есть
    // Постусловие: Текущий элемент смещается вправо или в случае конца списка влево, иначе null
    void remove();

    // Предусловие: Список пуст
    // Постусловие: Курсор указывает на добавленный элемент и длина списка равна одному
    void addToEmpty(T value);

    // Предусловие: Список не пуст
    // Постусловие: --
    void addTail(T value);

    // Предусловие: Список не пуст и текущий элемент существует
    // Постусловие: Текущее значение изменилось на заданное
    void replace(T newValue);

    // Предусловие: Список не пуст
    // Постусловие: Курсор не Null
    void find(T value);

    // Предусловие: Список не пуст
    // Постусловие: Курсор в конце списка
    void removeAll(T value);

    /// Запросы ///

    // Предусловие: список не пуст
    T get();

    // Предусловие: --
    // Постусловие: --
    Integer size();

    // Предусловие: --
    // Постусловие: --
    Boolean isHead();

    // Предусловие: --
    // Постусловие: --
    Boolean isTail();

    // Предусловие: --
    // Постусловие: --
    Boolean isValue();

    // Запросы статуса //

    Status isRight();

    Status isGet();

    Status isPutRight();

    Status isPutLeft();

    Status isRemove();

    Status isAddToEmpty();

    enum Status {
        OK, // курсор сместился вправо
        ERR, // курсор не сместился вправо (не выполнилось предусловие)
        NIL // команда не вызывалась
    }

}
